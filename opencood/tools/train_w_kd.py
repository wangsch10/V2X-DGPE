"""
Author: Yifan Lu <yifan_lu@sjtu.edu.cn>
"""
from argparse import Namespace

import argparse
import os
import statistics

import torch
from torch.utils.data import DataLoader
from tensorboardX import SummaryWriter
import gc

import importlib
import opencood.hypes_yaml.yaml_utils as yaml_utils
from opencood.tools import train_utils
from opencood.data_utils.datasets import build_dataset
import glob
from icecream import ic
import time
from concurrent.futures import ThreadPoolExecutor
import copy
import numpy as np
import json


def train_parser():
    parser = argparse.ArgumentParser(description="synthetic data generation")
    parser.add_argument("--hypes_yaml", "-y", type=str, required=True,
                        help='data generation yaml file needed ')
    parser.add_argument('--model_dir', default='',
                        help='Continued training path')
    parser.add_argument('--fusion_method', '-f', default="intermediate",
                        help='passed to inference.')
    parser.add_argument('--tcp_port', default='env://',
                        help='url used to set up distributed training')
    opt = parser.parse_args()
    return opt
def find_segment(frame, segment_dict):
    return segment_dict.get(int(frame), (None, None))
train_list=["000010", "000011", "000013", "000015", "000016", "000017", "000018", "000019", "000020", "000023", "000024", "000025", "000026", "000027", "000028", "000029", "000030", "000032", "000033", "000034", "000035", "000036", "000037", "000041", "000042", "000043", "000051", "000053", "000055", "000056", "000059", "000060", "000062", "000066", "000067", "000068", "000070", "000071", "000072", "000073", "000077", "000078", "000079", "000080", "000081", "000082", "000083", "000084", "000085", "000086", "000087", "000088", "000089", "000090", "000091", "000092", "000095", "000096", "000099", "000101", "000102", "000103", "000104", "000105", "000106", "000107", "000108", "000109", "000110", "000111", "000112", "000113", "000114", "000116", "000118", "000119", "000132", "000139", "000143", "000145", "000148", "000154", "000157", "000159", "000160", "000161", "000163", "000165", "000166", "000167", "000168", "000169", "000170", "000174", "000175", "000177", "000179", "000181", "000183", "000184", "000185", "000186", "000187", "000188", "000189", "000190", "000191", "000192", "000194", "000200", "000201", "000205", "000206", "000207", "000218", "000220", "000222", "000223", "000224", "000225", "000227", "000228", "000229", "000231", "000232", "000233", "000234", "000236", "000237", "000238", "000239", "000240", "000244", "000247", "000248", "000249", "000250", "000253", "000254", "000255", "000256", "000257", "000260", "000261", "000262", "000263", "000264", "000265", "000266", "000267", "000268", "000269", "000271", "000272", "000273", "000274", "000275", "000278", "000279", "000282", "000283", "000286", "000287", "000288", "000289", "000299", "000300", "000301", "000302", "000304", "000305", "000306", "000308", "000310", "000313", "000315", "000316", "000317", "000321", "000322", "000325", "000326", "000327", "000328", "000329", "000330", "000333", "000334", "000337", "000338", "000339", "000340", "000341", "000342", "000344", "000348", "000349", "000350", "000351", "000355", "000356", "000357", "000360", "000361", "000362", "000365", "000367", "000369", "000370", "000372", "000373", "000374", "000375", "000377", "000378", "000379", "000381", "000390", "000391", "000392", "000396", "000399", "000400", "000401", "000402", "000405", "000406", "000407", "000409", "000416", "000419", "000424", "000425", "000426", "000430", "000431", "000432", "000433", "000434", "000435", "000437", "000438", "000439", "000444", "000446", "000449", "000453", "000456", "000457", "000459", "000461", "000462", "000463", "000465", "000466", "000467", "000468", "000470", "000472", "000473", "000474", "000477", "000478", "000479", "000480", "000481", "000483", "000484", "000485", "000486", "000487", "000488", "000490", "000492", "000493", "000498", "000507", "000508", "000509", "000515", "000517", "000518", "000519", "000520", "000522", "000526", "000536", "000537", "000538", "000540", "000541", "000542", "000543", "000544", "000546", "000547", "000548", "000549", "000551", "000552", "000553", "000554", "000556", "000558", "000559", "000560", "000561", "000562", "000563", "000564", "000566", "000567", "000568", "000569", "000570", "000584", "000587", "000589", "000591", "000592", "000593", "000594", "000595", "000596", "000597", "000598", "000599", "000600", "000601", "000602", "000603", "000604", "000605", "000606", "000607", "000608", "000609", "000610", "000611", "000613", "000615", "000616", "000618", "000619", "000620", "000621", "000622", "000623", "000624", "000625", "000626", "000627", "000628", "000629", "000630", "000631", "000632", "000633", "000634", "000635", "000636", "000637", "000638", "000641", "000642", "000643", "000644", "000645", "000648", "000653", "000659", "000661", "000662", "000673", "000676", "000677", "000680", "000681", "000682", "000683", "000684", "000685", "000686", "000687", "000688", "000689", "000690", "000693", "000694", "000695", "000696", "000697", "000698", "000699", "000700", "000701", "000702", "000703", "000704", "000705", "000706", "000707", "000708", "000709", "000710", "000711", "000712", "000713", "000714", "000715", "000716", "000717", "000718", "000719", "000720", "000721", "000722", "000723", "000725", "000726", "000728", "000749", "000759", "000762", "000763", "000765", "000767", "000768", "000769", "000771", "000772", "000773", "000774", "000775", "000776", "000777", "000778", "000779", "000780", "000781", "000782", "000783", "000784", "000785", "000786", "000787", "000788", "000789", "000790", "000791", "000792", "000793", "000794", "000795", "000796", "000798", "000799", "000800", "000801", "000802", "000803", "000804", "000805", "000807", "000808", "000810", "000816", "000820", "000840", "000843", "000845", "000849", "000850", "000851", "000852", "000853", "000855", "000856", "000857", "000858", "000859", "000860", "000861", "000862", "000863", "000864", "000865", "000866", "000867", "001083", "001084", "001085", "001086", "001087", "001088", "001089", "001090", "001092", "001093", "001094", "001095", "001096", "001097", "001098", "001099", "001100", "001101", "001102", "001103", "001104", "001105", "001108", "001109", "001110", "001111", "001116", "001117", "001118", "001119", "001128", "001129", "001137", "001143", "001146", "001147", "001149", "001150", "001151", "001158", "001160", "001161", "001164", "001166", "001167", "001168", "001169", "001170", "001177", "001181", "001182", "001184", "001185", "001186", "001187", "001188", "001189", "001190", "001191", "001192", "001193", "001194", "001195", "001196", "001197", "001198", "001199", "001201", "001202", "001205", "001206", "001207", "001209", "001210", "001211", "001217", "001220", "001221", "001223", "001226", "001227", "001228", "001230", "001231", "001232", "001234", "001235", "001236", "001238", "001239", "001241", "001242", "001243", "001244", "001245", "001246", "001247", "001248", "001249", "001250", "001251", "001252", "001253", "001255", "001257", "001258", "001259", "001260", "001261", "001262", "001267", "001268", "001270", "001271", "001272", "001273", "001274", "001275", "001280", "001283", "001284", "001285", "001286", "001287", "001288", "001289", "001291", "001292", "001293", "001295", "001296", "001302", "001303", "001304", "001306", "001307", "001308", "001309", "001310", "001311", "001312", "001313", "001314", "001315", "001316", "001317", "001318", "001321", "001324", "001325", "001326", "001330", "001332", "001334", "001336", "001337", "001338", "001339", "001340", "001341", "001344", "001348", "001351", "001352", "001353", "001354", "001356", "001361", "001362", "001363", "001364", "001365", "001366", "001367", "001370", "001371", "001372", "001373", "001374", "001376", "001377", "001379", "001380", "001381", "001382", "001383", "001385", "001386", "001390", "001393", "001394", "001396", "001397", "001398", "001401", "001404", "001405", "001406", "001410", "001411", "001412", "001419", "001422", "001425", "001430", "001431", "001432", "001433", "001434", "001436", "001438", "001440", "001443", "001445", "001446", "001447", "001448", "001449", "001450", "001451", "001452", "001453", "001454", "001455", "001456", "001457", "001458", "001459", "001460", "001461", "001462", "001463", "001464", "001465", "001466", "001467", "001468", "001469", "001470", "001471", "001472", "001473", "001474", "001475", "001866", "001867", "001870", "001871", "001872", "001875", "001876", "001878", "001881", "001882", "001883", "001884", "001886", "001887", "001888", "001889", "001890", "001891", "001892", "001893", "001897", "001903", "001907", "001915", "001916", "001919", "001920", "001922", "001927", "001930", "001932", "001933", "001936", "001937", "001942", "001944", "001946", "001947", "001949", "001953", "001954", "001955", "001956", "001957", "001958", "001959", "001960", "001961", "001962", "001964", "001965", "001966", "001967", "001968", "001970", "001971", "001972", "001973", "001974", "001976", "001977", "001981", "001983", "001988", "001990", "001997", "002006", "002007", "002011", "002012", "002013", "002014", "002015", "002016", "002017", "002018", "002019", "002020", "002021", "002023", "002024", "002025", "002026", "002027", "002028", "002029", "002030", "002031", "002032", "002034", "002035", "002036", "002039", "002040", "002041", "002042", "002043", "002045", "002046", "002047", "002048", "002049", "002050", "002235", "002236", "002237", "002238", "002239", "002240", "002241", "002242", "002243", "002451", "002453", "002454", "002455", "002456", "002457", "002458", "002459", "002460", "002461", "002462", "002478", "002479", "002482", "002483", "002484", "002485", "002486", "002487", "002488", "002489", "002490", "002491", "002492", "002493", "002494", "002495", "002496", "002497", "002498", "002499", "002500", "002501", "002502", "002503", "002504", "002505", "002506", "002507", "002508", "002509", "002510", "002511", "002512", "002513", "002514", "002515", "002516", "002517", "002518", "002520", "002522", "002523", "002561", "002562", "002563", "002564", "002565", "002566", "002567", "002568", "002569", "002570", "002571", "003400", "003401", "003402", "003403", "003404", "003405", "003406", "003407", "003408", "003409", "003410", "003411", "003412", "003413", "003414", "003415", "003416", "003417", "003418", "003419", "003420", "003421", "003422", "003423", "003424", "003425", "003426", "003427", "003428", "003429", "003430", "003431", "003432", "003433", "003434", "003435", "003436", "003437", "003438", "003439", "003440", "003441", "003442", "003443", "003444", "003445", "003446", "003447", "003448", "003449", "003450", "003482", "003497", "003498", "003499", "003501", "003502", "003503", "003504", "003505", "003506", "003507", "003508", "003509", "003510", "003511", "003512", "003513", "003514", "003515", "003516", "003517", "003518", "003519", "003520", "003521", "003522", "003523", "003524", "003525", "003526", "003527", "003528", "003529", "003530", "003531", "003532", "003533", "003534", "003535", "003536", "003537", "003538", "003539", "003540", "003541", "003542", "003543", "003544", "003545", "003546", "003547", "003548", "003549", "003550", "003551", "003552", "003553", "003554", "003555", "003556", "003557", "003558", "003559", "003723", "003724", "003725", "003726", "003727", "003728", "003729", "003730", "003731", "003732", "003733", "003734", "003735", "003736", "003737", "003738", "003739", "003740", "003741", "003742", "003743", "003744", "003745", "003746", "003747", "003748", "003749", "003750", "003751", "003752", "003753", "003754", "003755", "003756", "003757", "003758", "003759", "003760", "003761", "003762", "003763", "003764", "003765", "003766", "003767", "003768", "003769", "003770", "003771", "003772", "003773", "003774", "003775", "003776", "003777", "003778", "003779", "003780", "003781", "003782", "003783", "003784", "003786", "003825", "003826", "004482", "004485", "004486", "004487", "004488", "004489", "004490", "004491", "004493", "004494", "004495", "004496", "004497", "004498", "004499", "004500", "004501", "004502", "004503", "004504", "004505", "004506", "004507", "004508", "004509", "004510", "004511", "004512", "004513", "004514", "004515", "004516", "004517", "004518", "004519", "004520", "004521", "004522", "004523", "004524", "004525", "004526", "004527", "004528", "004529", "004530", "004531", "004532", "004533", "004534", "004535", "004536", "004537", "004538", "004539", "004540", "004542", "004543", "004544", "004545", "004563", "004581", "004582", "004583", "004584", "004585", "004586", "004587", "004588", "004589", "004590", "004591", "004592", "004593", "004594", "004595", "004596", "004597", "004598", "004599", "004600", "004601", "004602", "004603", "004604", "004605", "004606", "004607", "004608", "004609", "004610", "004611", "004612", "004613", "004614", "004615", "004616", "004617", "004618", "004619", "004620", "004621", "004622", "004623", "004624", "004625", "004626", "004627", "004628", "004629", "004630", "004631", "004632", "004633", "004634", "004635", "004636", "004637", "004638", "004639", "004640", "004641", "004642", "004643", "004644", "004688", "004689", "004690", "004691", "004692", "004693", "004694", "004695", "004696", "004697", "004698", "004699", "004700", "004701", "004702", "004703", "004704", "004705", "004706", "004707", "004708", "004709", "004710", "004711", "004712", "004713", "004714", "004715", "004716", "004717", "004718", "004719", "004720", "004721", "004722", "004723", "004724", "004725", "004726", "004727", "004728", "004729", "004730", "004731", "004732", "004733", "004734", "004735", "004736", "004737", "004738", "004739", "004740", "004741", "004742", "004884", "004885", "004886", "004887", "004888", "004889", "004890", "004891", "004893", "004894", "004895", "004896", "004897", "004898", "004899", "004900", "004901", "004902", "004903", "004904", "004905", "004906", "004907", "004908", "004909", "004910", "004911", "004913", "004956", "004958", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004969", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004980", "004981", "004982", "004983", "004984", "004985", "004986", "004987", "004988", "004989", "004990", "004991", "004992", "004993", "004994", "004995", "004996", "004997", "004998", "004999", "005000", "005001", "005002", "005003", "005004", "005005", "005006", "005007", "005008", "005009", "005010", "005011", "005012", "005013", "005014", "005015", "005016", "005017", "005018", "005019", "005020", "005025", "005058", "005060", "005062", "005063", "005064", "005065", "005066", "005067", "005068", "005069", "005071", "005072", "005073", "005604", "005605", "005606", "005607", "005608", "005609", "005610", "005611", "005612", "005613", "005614", "005615", "005616", "005617", "005618", "005619", "005620", "005621", "005622", "005623", "005624", "005625", "005626", "005627", "005628", "005629", "005630", "005631", "005632", "005633", "005634", "005635", "005636", "005637", "005638", "005639", "005640", "005641", "005642", "005643", "005644", "005645", "005646", "005647", "005648", "005686", "005690", "005692", "005696", "005698", "005699", "005701", "005702", "005703", "005704", "005705", "005706", "005707", "005708", "005709", "005710", "005711", "005712", "005713", "005714", "005715", "005716", "005717", "005718", "005719", "005720", "005721", "005722", "005723", "005724", "005725", "005726", "005727", "005728", "005729", "005730", "005731", "005732", "005733", "005734", "005735", "005736", "005737", "005738", "005739", "005740", "005741", "005742", "005743", "005744", "005745", "005746", "005747", "005748", "005749", "005750", "005751", "005757", "005766", "005767", "005785", "005786", "005787", "005788", "005789", "005790", "005791", "005792", "005793", "005794", "005795", "005796", "005797", "005798", "005799", "005800", "005801", "005802", "005803", "005804", "005805", "005806", "005807", "005808", "005852", "005854", "005855", "005856", "005857", "005858", "005859", "005860", "005861", "005862", "005863", "005864", "005865", "005866", "005867", "005868", "005869", "005870", "005871", "005872", "005873", "005874", "005875", "005876", "005877", "005878", "005879", "005880", "005881", "005882", "005883", "005884", "005885", "005886", "005887", "005888", "005889", "005890", "005891", "005892", "005893", "005894", "005895", "005896", "005897", "005898", "005899", "005900", "005901", "005902", "005903", "005904", "005905", "005906", "005907", "005908", "005909", "005910", "005911", "005912", "005913", "005914", "005915", "005916", "005917", "005918", "005919", "006108", "006109", "006110", "006111", "006112", "006113", "006114", "006115", "006116", "006117", "006118", "006121", "006165", "006166", "006168", "006169", "006171", "006172", "006173", "006174", "006175", "006176", "006177", "006178", "006179", "006180", "006181", "006182", "006183", "006184", "006185", "006186", "006187", "006188", "006189", "006190", "006191", "006192", "006193", "006194", "006195", "006196", "006197", "006198", "006199", "006200", "006201", "006202", "006203", "006204", "006205", "006206", "006207", "006208", "006209", "006210", "006211", "006212", "006213", "006214", "006215", "006216", "006217", "006218", "006219", "006220", "006221", "006222", "006223", "006224", "006225", "006228", "006231", "006269", "006270", "006271", "006272", "006273", "006274", "006275", "006276", "006277", "006278", "006279", "006280", "006281", "006282", "006283", "006284", "006285", "006286", "006287", "006288", "006289", "006290", "006291", "006292", "006293", "006294", "006295", "006296", "006297", "006298", "006299", "006300", "006301", "006302", "006303", "006304", "006305", "006306", "006307", "006308", "006309", "006310", "006311", "006312", "006313", "006314", "006315", "006316", "006317", "006318", "006319", "006320", "006321", "006322", "006323", "006324", "006325", "006326", "006327", "006328", "006329", "006330", "006331", "006332", "006372", "006373", "006376", "006378", "006379", "006380", "006381", "006382", "006383", "006384", "006385", "006386", "006387", "006388", "006389", "006390", "006391", "006392", "006393", "006394", "006396", "006397", "006398", "006399", "006400", "006401", "006402", "006403", "006404", "006405", "006406", "006407", "006408", "006409", "006410", "006411", "006412", "006413", "006414", "006415", "006416", "006417", "006418", "006419", "006420", "006421", "006422", "006423", "006424", "006425", "006426", "006427", "006428", "006429", "006430", "006431", "006432", "006433", "006434", "006435", "006437", "006438", "006439", "006440", "006441", "006442", "006443", "006444", "006445", "006446", "006447", "006448", "006449", "006450", "006451", "006452", "006453", "006454", "006455", "006456", "006457", "006458", "006459", "006460", "006461", "006462", "006463", "006464", "006465", "006466", "006467", "006468", "006469", "006470", "006471", "006472", "006473", "006474", "006475", "006476", "006477", "006478", "006479", "006480", "006481", "006484", "006485", "006488", "006489", "006527", "006530", "006532", "006533", "006534", "006535", "006536", "006537", "006538", "006539", "006540", "006541", "006542", "006543", "006544", "006545", "006546", "006547", "006548", "006549", "006550", "006552", "006553", "006554", "006555", "006556", "006557", "006558", "006559", "006560", "006561", "006562", "006563", "006564", "006565", "006566", "006567", "006568", "006569", "006570", "006571", "006572", "006573", "006574", "006575", "006576", "006577", "006578", "006579", "006580", "006581", "006582", "006583", "006584", "006585", "006589", "006590", "006591", "006592", "006593", "006594", "006595", "006596", "006597", "006598", "006599", "006600", "006601", "006602", "006603", "006604", "006605", "006606", "006607", "006608", "006609", "006610", "006611", "006612", "006613", "006614", "006618", "006619", "006620", "006622", "006623", "006632", "006633", "006664", "006665", "006666", "006667", "006668", "006669", "006670", "006671", "006672", "006673", "006674", "006675", "006676", "006677", "006678", "006679", "006680", "006681", "006682", "006683", "006684", "006685", "006686", "006687", "006688", "006689", "006690", "006691", "006692", "006693", "006694", "006695", "006696", "006697", "006698", "006699", "006700", "006701", "006702", "006703", "006704", "006705", "006708", "006709", "006710", "006711", "006712", "006713", "006714", "006715", "006716", "006717", "006718", "006719", "006720", "006721", "006722", "006723", "006724", "006725", "006726", "006727", "006728", "006729", "006730", "006731", "006732", "006733", "006734", "006735", "006736", "006737", "006738", "006739", "006740", "006741", "006742", "006743", "006744", "006745", "006746", "006747", "006748", "006749", "006750", "006751", "006752", "006753", "006754", "006755", "006756", "006757", "006758", "006759", "006760", "006761", "006762", "006763", "006764", "006765", "006766", "006767", "006768", "006769", "006770", "006771", "006772", "006773", "006774", "006775", "006776", "006777", "006778", "006779", "006780", "006781", "006782", "006783", "006784", "006785", "006786", "006787", "006788", "006789", "006790", "006791", "006792", "006793", "006794", "006795", "006796", "006797", "006798", "006799", "006800", "006801", "006802", "006803", "006804", "006805", "006806", "006807", "006808", "006809", "006810", "006811", "006812", "006813", "006814", "006815", "006816", "006817", "006818", "006821", "006822", "006823", "006825", "006826", "006828", "006829", "006831", "006840", "006841", "006887", "006888", "006889", "006890", "006891", "006892", "006893", "006894", "006895", "006896", "006897", "006898", "006899", "006900", "006901", "006902", "006903", "006904", "006905", "006906", "006907", "006908", "006909", "006910", "006911", "006912", "006913", "006914", "006915", "006916", "006917", "006918", "006919", "006920", "006921", "006922", "006923", "006924", "006925", "006926", "006927", "006928", "006929", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006944", "006945", "006946", "006947", "006948", "006949", "006950", "006951", "006952", "006953", "006954", "006955", "006956", "006957", "006958", "006959", "006960", "006961", "006962", "006963", "006964", "006965", "006966", "006967", "006968", "006969", "006970", "006971", "006972", "006973", "006974", "006975", "006976", "006977", "006978", "006979", "006980", "006981", "006982", "006983", "006984", "006985", "006986", "006987", "006988", "006989", "006990", "006991", "006992", "006993", "006994", "006995", "006996", "006997", "006998", "006999", "007000", "007001", "007002", "007003", "007004", "007005", "007457", "007458", "007459", "007477", "007478", "007479", "007487", "007488", "007489", "007490", "007495", "007499", "007500", "007501", "007504", "007505", "007506", "007507", "007508", "007509", "007510", "007511", "007512", "007513", "007515", "007516", "007517", "007518", "007519", "007520", "007521", "007522", "007523", "007524", "007525", "007526", "007527", "007528", "007529", "007531", "007532", "007533", "007534", "007535", "007536", "007538", "007539", "007541", "007542", "007543", "007544", "007545", "007546", "007547", "007548", "007549", "007550", "007552", "007553", "007554", "007555", "007556", "007557", "007558", "007559", "007560", "007561", "007562", "007563", "007564", "007565", "007572", "007573", "007574", "007575", "007576", "007577", "007578", "007579", "007580", "007581", "007582", "007583", "007584", "007585", "007586", "007587", "007588", "007590", "007591", "007593", "007594", "007595", "007596", "007597", "007598", "007599", "007600", "007601", "007602", "007603", "007604", "007605", "007606", "007607", "007608", "007609", "007610", "007611", "007612", "007613", "007614", "007615", "007616", "007617", "007618", "007619", "007620", "007621", "007622", "007623", "007624", "007625", "007626", "007627", "007628", "007629", "007630", "007631", "007632", "007633", "007634", "007635", "007636", "007638", "007639", "007640", "007641", "007642", "007643", "007644", "007716", "007737", "007740", "007741", "007750", "007751", "007753", "007754", "007755", "007756", "007757", "007768", "007769", "007770", "007771", "007772", "007773", "007774", "007775", "007777", "007782", "007783", "007784", "007785", "007786", "007787", "007788", "007789", "007790", "007791", "007792", "007793", "007794", "007795", "007796", "007797", "007798", "007799", "007800", "007801", "007802", "007803", "007804", "007805", "007806", "007807", "007808", "007809", "007810", "007811", "007812", "007813", "007814", "008796", "008797", "008798", "008799", "008800", "008801", "008802", "008803", "008804", "008805", "008806", "008807", "008808", "008809", "008810", "008811", "008812", "008813", "008814", "008815", "008816", "008817", "008818", "008819", "008820", "008821", "008822", "008823", "008824", "008825", "008826", "008827", "008828", "008829", "008830", "008831", "008832", "008833", "008834", "008835", "008836", "008837", "008838", "008839", "008840", "008841", "008842", "008843", "008844", "008845", "008846", "008847", "008848", "008849", "008850", "008851", "008852", "008853", "008854", "008855", "008856", "008857", "008858", "008859", "008860", "008861", "008862", "008863", "008864", "008865", "008866", "008867", "008868", "008869", "008870", "008871", "008872", "008873", "008874", "008875", "008876", "008877", "008878", "008879", "008880", "008881", "008882", "008883", "008884", "008885", "008886", "008887", "008888", "008889", "008890", "008891", "008892", "008893", "008894", "008895", "008896", "008897", "008898", "008899", "008900", "008901", "008902", "008903", "008904", "008905", "008906", "008907", "008908", "008909", "008910", "008911", "008912", "008913", "008914", "008915", "008916", "008917", "008918", "008919", "008920", "008921", "008922", "008923", "008924", "008925", "008926", "008927", "008928", "008929", "008930", "008931", "008932", "008933", "008934", "008944", "008954", "008960", "008963", "008964", "008965", "008970", "008975", "008976", "008980", "008981", "008984", "008985", "008986", "008989", "008990", "008991", "008993", "008994", "008995", "008996", "008997", "008998", "009000", "009001", "009003", "009004", "009005", "009007", "009008", "009009", "009010", "009011", "009012", "009013", "009014", "009016", "009017", "009018", "009021", "009022", "009023", "009025", "009026", "009027", "009028", "009029", "009030", "009031", "009032", "009033", "009034", "009035", "009036", "009037", "009038", "009039", "009040", "009041", "009042", "009043", "009044", "009045", "009046", "009047", "009048", "009049", "009050", "009051", "009052", "009053", "009054", "009055", "009056", "009057", "009058", "009059", "009060", "009061", "009062", "009063", "009064", "009065", "009066", "009067", "009068", "009069", "009070", "009071", "009072", "009073", "009074", "009075", "009076", "009077", "009078", "009079", "009080", "009081", "009082", "009083", "009084", "009085", "009086", "009087", "009088", "009089", "009090", "009091", "009092", "009093", "009094", "009095", "009096", "009097", "009098", "009099", "009100", "009101", "009102", "009103", "009104", "009105", "009106", "009107", "009108", "009109", "009113", "009114", "009115", "009116", "009117", "009118", "009119", "009120", "009121", "009122", "009123", "009124", "009125", "009127", "009128", "009129", "009130", "009131", "009132", "009133", "009134", "009135", "009137", "009138", "009139", "009140", "009141", "009142", "009143", "009144", "009145", "009147", "009148", "009149", "009151", "009152", "009153", "009154", "009156", "009157", "009158", "009161", "009162", "009163", "009164", "009166", "009167", "009168", "009169", "009171", "009172", "009174", "009176", "009177", "009178", "009181", "009182", "009183", "009187", "009192", "009196", "009198", "009216", "009217", "009220", "009225", "009264", "009301", "009302", "009303", "009304", "009305", "009306", "009307", "009308", "009309", "009310", "009311", "009312", "009313", "009314", "009315", "009316", "009317", "009318", "009319", "009320", "009321", "009322", "009323", "009324", "009325", "009326", "009327", "009328", "009329", "009330", "009331", "009332", "009333", "009334", "009335", "009336", "009337", "009338", "009339", "009340", "009341", "009342", "009343", "009344", "009345", "009346", "009347", "009348", "009349", "009350", "009351", "009352", "009353", "009354", "009355", "009356", "009357", "009358", "009359", "009360", "009361", "009362", "009363", "009364", "009365", "009366", "009367", "009368", "009369", "009370", "009371", "009372", "009373", "009374", "009375", "009376", "009377", "009378", "009379", "009380", "009381", "009382", "009383", "009384", "009385", "009386", "009387", "009388", "009389", "009390", "009391", "009392", "009393", "009394", "009395", "009396", "009397", "009398", "009399", "009400", "009401", "009402", "009403", "009404", "009405", "009406", "009407", "009408", "009409", "009410", "009411", "009412", "009413", "009414", "009415", "009416", "009417", "009418", "009419", "009420", "009421", "009422", "009423", "009424", "009425", "009426", "009427", "009428", "009429", "009430", "009431", "009432", "009433", "009434", "009435", "009436", "009437", "009438", "009439", "009440", "009441", "009442", "009443", "009444", "009445", "009446", "009447", "009448", "009449", "009450", "009451", "009452", "009453", "009454", "009455", "009456", "009457", "009458", "009459", "009460", "009461", "009462", "009463", "009464", "009465", "009466", "009467", "009468", "009469", "010021", "010022", "010138", "010141", "010144", "010147", "010150", "010153", "010159", "010162", "010165", "010168", "010171", "010174", "010176", "010177", "010178", "010180", "010181", "010183", "010184", "010186", "010187", "010188", "010189", "010190", "010192", "010193", "010196", "010198", "010199", "010202", "010204", "010205", "010206", "010207", "010208", "010209", "010210", "010211", "010212", "010215", "010217", "010218", "010219", "010221", "010222", "010223", "010224", "010225", "010226", "010227", "010228", "010230", "010231", "010232", "010233", "010234", "010235", "010236", "010237", "010238", "010239", "010240", "010241", "010242", "010243", "010244", "010245", "010246", "010247", "010248", "010249", "010250", "010251", "010252", "010253", "010254", "010255", "010256", "010257", "010258", "010259", "010260", "010261", "010262", "010263", "010264", "010265", "010266", "010267", "010268", "010269", "010270", "010271", "010272", "010273", "010274", "010275", "010276", "010277", "010278", "010279", "010280", "010281", "010282", "010283", "010284", "010285", "010286", "010287", "010288", "010289", "010290", "010291", "010292", "010293", "010294", "010295", "010296", "010297", "010298", "010299", "010300", "010301", "010302", "010303", "010304", "010305", "010306", "010307", "010308", "010309", "010310", "010311", "010312", "010313", "010314", "010315", "010316", "010317", "010318", "010319", "010320", "010321", "010322", "010323", "010324", "010325", "010326", "010327", "010328", "010329", "010330", "010331", "010332", "010333", "010334", "010335", "010336", "010337", "010338", "010339", "010340", "010341", "010342", "010343", "010344", "010345", "010346", "010347", "010348", "010349", "010350", "010351", "010352", "010353", "010354", "010355", "010356", "010357", "010358", "010359", "010360", "010361", "010362", "010363", "010364", "010365", "010366", "010367", "010368", "010369", "010370", "010371", "010372", "010373", "010374", "010375", "010376", "010377", "010378", "010379", "010380", "010381", "010382", "010383", "010384", "010385", "010386", "010387", "010388", "010389", "010390", "010391", "010392", "010393", "010394", "010395", "010396", "010397", "010398", "010399", "010400", "010401", "010402", "010403", "010404", "010405", "010406", "010407", "010408", "010409", "010410", "010411", "010412", "010413", "010414", "010415", "010416", "010417", "010418", "010419", "010421", "010422", "010423", "010424", "010426", "010427", "010428", "010429", "010430", "010431", "010432", "010433", "010434", "010435", "010436", "010437", "010438", "010439", "010440", "010441", "010442", "010443", "010444", "010445", "010446", "010447", "010448", "010449", "010450", "010451", "010452", "010453", "010454", "010455", "010456", "010457", "010458", "010459", "010460", "010461", "010462", "010463", "010464", "010465", "010466", "010467", "010468", "010469", "010470", "010471", "010472", "010473", "010474", "010475", "010476", "010477", "010478", "010479", "010480", "010481", "010482", "010483", "010484", "010485", "010486", "010487", "010488", "010489", "010490", "010491", "010492", "010493", "010494", "010495", "010496", "010497", "010498", "010499", "010500", "010501", "010502", "010503", "010504", "010505", "010506", "010507", "010508", "010509", "010510", "010511", "010512", "010513", "010514", "010515", "010516", "010517", "010518", "010519", "010520", "010521", "010522", "010523", "010524", "010525", "010526", "010527", "010528", "010529", "010530", "010531", "010532", "010533", "010534", "010535", "010536", "010537", "010538", "010539", "010540", "010541", "010542", "010543", "010544", "010545", "010546", "010547", "010548", "010549", "010550", "010551", "010552", "010553", "010554", "010555", "010556", "010557", "010558", "010559", "010560", "010561", "010562", "010563", "010564", "010565", "010566", "010567", "010568", "010569", "010570", "010571", "010572", "010573", "010574", "010575", "010576", "010577", "010578", "010579", "010580", "010581", "010582", "010583", "010584", "010585", "010586", "010587", "010588", "010589", "010590", "010591", "010592", "010593", "010594", "010595", "010596", "010597", "010598", "010599", "010600", "010601", "010602", "010603", "010604", "010605", "010606", "010607", "010608", "010609", "010612", "010614", "010616", "010617", "010618", "010619", "010620", "010621", "010622", "010623", "010624", "010625", "010626", "010627", "010628", "010629", "010630", "010631", "010632", "010633", "010634", "010635", "010636", "010637", "010638", "010639", "010640", "010641", "010642", "010643", "010644", "010645", "010646", "010647", "010648", "010649", "010650", "010652", "010653", "010654", "010655", "010656", "010657", "010658", "010659", "010660", "010661", "010662", "010663", "010664", "010665", "010666", "010667", "010668", "010669", "010670", "010671", "010672", "010673", "010674", "010675", "010676", "010677", "010678", "010679", "010680", "010681", "010682", "010683", "010684", "010685", "010686", "010687", "010688", "010689", "010690", "010691", "010692", "010693", "010694", "010695", "010696", "010697", "010698", "010699", "010700", "010701", "010702", "010703", "010704", "010705", "010706", "010707", "010708", "010709", "010710", "010711", "010712", "010713", "010714", "010715", "010716", "010717", "010718", "010719", "010720", "010721", "010722", "010723", "010724", "010725", "010726", "010727", "010728", "010729", "010730", "010737", "010738", "010739", "010740", "010741", "010742", "010743", "010744", "010745", "010746", "010747", "010748", "010749", "010750", "010751", "010752", "010753", "010754", "010757", "010758", "010759", "010760", "010761", "010762", "010763", "010764", "010765", "010766", "010767", "010768", "010769", "010770", "010771", "010772", "010773", "010774", "010775", "010776", "010777", "010778", "010779", "010780", "010781", "010782", "010783", "010785", "010786", "010787", "010788", "010789", "010790", "010791", "010792", "010793", "010794", "010795", "010796", "010797", "010798", "010799", "011266", "011275", "011277", "011279", "011280", "011281", "011282", "011283", "011284", "011286", "011288", "011289", "011290", "011291", "011292", "011293", "011294", "011295", "011296", "011297", "011298", "011299", "011300", "011301", "011302", "011303", "011304", "011305", "011306", "011307", "011308", "011309", "011310", "011311", "011312", "011313", "011314", "011315", "011316", "011317", "011318", "011319", "011320", "011321", "011322", "011323", "011326", "011345", "011347", "011348", "011349", "011351", "011352", "011353", "011354", "011355", "011356", "011357", "011358", "011359", "011360", "011361", "011362", "011363", "011364", "011365", "011366", "011367", "011368", "011369", "011370", "011371", "011372", "011373", "011374", "011375", "011376", "011377", "011378", "011379", "011380", "011381", "011382", "011383", "011384", "011390", "011391", "011405", "011416", "011417", "011418", "011419", "011420", "011422", "011423", "011424", "011425", "011426", "011427", "011428", "011429", "011430", "011431", "011432", "011433", "011434", "011435", "011436", "011437", "011438", "011439", "011440", "011441", "011442", "011443", "011444", "011445", "011446", "011447", "011448", "011449", "011450", "011451", "011452", "011594", "011598", "011599", "011600", "011601", "011602", "011603", "011604", "011605", "011606", "011607", "011608", "011609", "011610", "011611", "011612", "011613", "011614", "011616", "011617", "011618", "011619", "011620", "011621", "011622", "011623", "011624", "011625", "011626", "011627", "011628", "011629", "011630", "011632", "011633", "011655", "011656", "011657", "011658", "011659", "011660", "011661", "011662", "011663", "011664", "011665", "011666", "011667", "011669", "011670", "011671", "011672", "011673", "011674", "011675", "011676", "011677", "011678", "011679", "011680", "011681", "011682", "011683", "011684", "011685", "011686", "011687", "011688", "011689", "011690", "011695", "011696", "011704", "011705", "011706", "011712", "011713", "011715", "011717", "011721", "011723", "011724", "011725", "011726", "011727", "011728", "011729", "011730", "011731", "011732", "011733", "011734", "011735", "011736", "011737", "011738", "011739", "011740", "011741", "011742", "011743", "011744", "011745", "011746", "011747", "011748", "011749", "011750", "011751", "011752", "011753", "011754", "011755", "011756", "011757", "011765", "012411", "012412", "012414", "012433", "012438", "012440", "012442", "012443", "012444", "012445", "012446", "012447", "012448", "012449", "012450", "012451", "012452", "012453", "012454", "012455", "012456", "012457", "012458", "012459", "012460", "012461", "012462", "012463", "012464", "012465", "012466", "012467", "012468", "012469", "012470", "012471", "012472", "012473", "012474", "012475", "012476", "012477", "012478", "012479", "012480", "012481", "012482", "012483", "012485", "012487", "012488", "012500", "012503", "012504", "012505", "012506", "012508", "012509", "012510", "012511", "012513", "012514", "012515", "012516", "012517", "012518", "012519", "012520", "012521", "012522", "012523", "012524", "012525", "012526", "012527", "012528", "012529", "012530", "012531", "012532", "012533", "012534", "012535", "012537", "012539", "012540", "012541", "012547", "012558", "012560", "012561", "012562", "012563", "012564", "012565", "012567", "012568", "012569", "012570", "012571", "012572", "012573", "012574", "012575", "012577", "012579", "012581", "012582", "012585", "012587", "012589", "012590", "012591", "012592", "012593", "012594", "012595", "012596", "012597", "012598", "012599", "012600", "012601", "012602", "012603", "012604", "012607", "013056", "013059", "013063", "013065", "013066", "013067", "013068", "013069", "013070", "013071", "013072", "013073", "013074", "013075", "013076", "013077", "013078", "013079", "013080", "013081", "013082", "013083", "013084", "013085", "013086", "013087", "013088", "013089", "013090", "013091", "013092", "013093", "013094", "013095", "013096", "013098", "013099", "013101", "013116", "013118", "013120", "013121", "013122", "013123", "013124", "013125", "013126", "013127", "013128", "013129", "013130", "013131", "013132", "013133", "013134", "013135", "013136", "013137", "013138", "013139", "013140", "013141", "013143", "013144", "013145", "013146", "013147", "013148", "013149", "013150", "013151", "013152", "013153", "013154", "013155", "013156", "013157", "013158", "013159", "013160", "013161", "013163", "013164", "013182", "013185", "013187", "013188", "013189", "013190", "013191", "013192", "013193", "013195", "013196", "013197", "013198", "013199", "013513", "013536", "013539", "013540", "013542", "013543", "013545", "013546", "013547", "013548", "013549", "013550", "013552", "013553", "013554", "013555", "013556", "013557", "013558", "013559", "013560", "013561", "013562", "013563", "013564", "013565", "013566", "013567", "013568", "013569", "013570", "013571", "013572", "013573", "013574", "013575", "013576", "013577", "013578", "013579", "013581", "013599", "013600", "013601", "013604", "013605", "013606", "013607", "013608", "013609", "013610", "013611", "013612", "013613", "013614", "013615", "013616", "013617", "013618", "013619", "013620", "013621", "013622", "013623", "013624", "013625", "013626", "013627", "013628", "013629", "013630", "013631", "013632", "013633", "013635", "013638", "013640", "013658", "013659", "013661", "013662", "013663", "013664", "013665", "013666", "013667", "013668", "013669", "013670", "013671", "013672", "013673", "013674", "013675", "013676", "013677", "013678", "013679", "013680", "013681", "013682", "013683", "013684", "013685", "013686", "013687", "013688", "013689", "013690", "013691", "013692", "013693", "013694", "013695", "013696", "013697", "013698", "013713", "013716", "014062", "014088", "014090", "014091", "014092", "014093", "014095", "014096", "014097", "014098", "014099", "014100", "014101", "014102", "014103", "014104", "014105", "014106", "014107", "014108", "014109", "014110", "014111", "014112", "014113", "014114", "014115", "014116", "014117", "014118", "014119", "014120", "014121", "014122", "014123", "014126", "014139", "014145", "014148", "014149", "014150", "014151", "014152", "014153", "014154", "014155", "014156", "014157", "014158", "014159", "014160", "014161", "014162", "014163", "014164", "014165", "014166", "014167", "014168", "014169", "014170", "014171", "014172", "014173", "014174", "014175", "014176", "014177", "014178", "014179", "014180", "014182", "014183", "014199", "014203", "014206", "014667", "014678", "014679", "014680", "014681", "014682", "014683", "014684", "014685", "014686", "014687", "014688", "014689", "014690", "014691", "014692", "014693", "014694", "014705", "014706", "014707", "014708", "014709", "014710", "014711", "014712", "014713", "014714", "014715", "014716", "014717", "014718", "014719", "014720", "014721", "014731", "014733", "014734", "014735", "014736", "014737", "014738", "014739", "014740", "014741", "014742", "014743", "014744", "014745", "014746", "014747", "014945", "014946", "014947", "014948", "014949", "014950", "014951", "014952", "014953", "014954", "014966", "014967", "014968", "014969", "014970", "014971", "014972", "014973", "014974", "014975", "014976", "014977", "014978", "014979", "014980", "014981", "014986", "014987", "014988", "014989", "014990", "014991", "014992", "014993", "014994", "014995", "014996", "014997", "014998", "014999", "015009", "015010", "015011", "015012", "015013", "015014", "015015", "015016", "015017", "015018", "015019", "015020", "015021", "015022", "015023", "015024", "015025", "015036", "015037", "015038", "015039", "015040", "015041", "015042", "015043", "015044", "015045", "015046", "015047", "015048", "015049", "015050", "015051", "015063", "015064", "015065", "015066", "015067", "015068", "015069", "015070", "015071", "015072", "015073", "015074", "015075", "015076", "015077", "015078", "015086", "015087", "015088", "015089", "015090", "015091", "015092", "015093", "015094", "015095", "015096", "015097", "015098", "015099", "015109", "015110", "015111", "015112", "015113", "015114", "015115", "015116", "015117", "015118", "015119", "015120", "015121", "015122", "015123", "015135", "015136", "015137", "015138", "015139", "015140", "015141", "015142", "015143", "015144", "015145", "015146", "015147", "015148", "015149", "015150", "015152", "015162", "015163", "015164", "015165", "015166", "015167", "015168", "015169", "015170", "015171", "015172", "015173", "015174", "015175", "015176", "015177", "015178", "015189", "015190", "015191", "015192", "015193", "015194", "015195", "015196", "015197", "015198", "015199", "015200", "015201", "015202", "015203", "015204", "015205", "015215", "015216", "015217", "015218", "015219", "015220", "015221", "015222", "015223", "015224", "015225", "015226", "015227", "015228", "015229", "015230", "015372", "015373", "015374", "015375", "015376", "015377", "015378", "015379", "015380", "015381", "015382", "015383", "015384", "015385", "015386", "015387", "015388", "015400", "015401", "015402", "015403", "015404", "015405", "015406", "015407", "015408", "015409", "015410", "015411", "015412", "015413", "015414", "015426", "015427", "015428", "015429", "015430", "015431", "015432", "015433", "015434", "015435", "015436", "015437", "015438", "015439", "015440", "015441", "015442", "015453", "015454", "015455", "015456", "015457", "015458", "015459", "015460", "015461", "015462", "015463", "015464", "015465", "015466", "015467", "015469", "015479", "015480", "015481", "015482", "015483", "015484", "015485", "015486", "015487", "015488", "015489", "015490", "015491", "015492", "015493", "015494", "015505", "015507", "015508", "015509", "015510", "015511", "015512", "015513", "015514", "015515", "015516", "015517", "015518", "015519", "015520", "015521", "015522", "015532", "015533", "015534", "015535", "015536", "015537", "015538", "015539", "015540", "015541", "015542", "015543", "015544", "015545", "015546", "015547", "015548", "015550", "015560", "015561", "015562", "015563", "015564", "015565", "015566", "015567", "015568", "015569", "015570", "015571", "015572", "015573", "015574", "015575", "015576", "015586", "015587", "015588", "015589", "015590", "015591", "015592", "015593", "015594", "015595", "015596", "015597", "015598", "015599", "015856", "015857", "015858", "015859", "015860", "015861", "015862", "015863", "015874", "015875", "015876", "015877", "015878", "015879", "015880", "015881", "015882", "015883", "015884", "015885", "015886", "015887", "015888", "015889", "015891", "015899", "015901", "015902", "015903", "015904", "015905", "015906", "015907", "015908", "015909", "015910", "015911", "015912", "015913", "015914", "017595", "018075", "018076", "018077", "018078", "018079", "018080", "018081", "018082", "018083", "018084", "018085", "019996", "019997", "019998", "019999", "020000", "020001", "020002", "020003", "020004", "020005", "020006", "020007", "020008", "020009", "020018", "020030", "020048", "020050", "020051", "020053", "020054", "020055", "020056", "020057", "020058", "020059", "020060", "020061", "020062", "020063", "020064", "020065", "020066", "020067", "020068", "020069", "020070", "020071", "020072", "020073", "020074", "020075", "020076", "020077", "020078", "020079", "020080", "020081", "020082", "020083", "020084", "020085", "020086", "020087", "020088", "020089", "020090", "020091", "020092", "020093", "020094", "020095", "020096", "020097", "020098", "020099", "020100", "020101", "020102", "020103", "020104", "020105", "020106", "020107", "020109", "020111", "020148", "020151", "020152", "020153", "020154", "020155", "020156", "020157", "020158", "020159", "020160", "020161", "020162", "020163", "020165", "020166", "020167", "020168", "020169", "020170", "020171", "020172", "020173", "020174", "020176", "020177", "020178", "020179", "020180", "020183", "020184", "020185", "020186", "020187", "020188", "020189", "020191", "020192", "020193", "020194", "020195", "020196", "020197", "020198", "020200", "020202", "020205", "020206", "020210", "020230", "020231", "020234", "020235", "020236", "020237", "020238", "020239", "020240", "020241", "020242", "020243", "020244", "020245", "020246", "020247", "020248", "020249", "020250", "020251", "020252", "020253", "020254", "020255", "020256", "020257", "020258", "020259", "020260", "020261", "020262", "020263", "020264", "020265", "020266", "020267", "020268", "020269", "020270", "020271", "020272", "020273", "020274", "020275", "020276", "020277", "020278", "020279", "020280", "020281", "020282", "020283", "020284", "020285", "020286", "020287", "020288", "020289", "020290", "020291", "020292", "020293", "020295", "020296", "020298", "020333", "020336", "020338", "020339", "020340", "020341", "020342", "020343", "020344", "020345", "020346", "020347", "020348", "020349", "020350", "020351", "020352", "020353", "020354", "020355", "020356", "020357", "020358", "020359", "020360", "020361", "020362", "020363", "020364", "020365", "020366", "020367", "020368", "020369", "020370", "020371", "020372", "020373", "020374"]

val_list=["000211", "000212", "000214", "000215", "000216", "000217", "000871", "000872", "000873", "000874", "000876", "000881", "000883", "000898", "000903", "000904", "000905", "000907", "000909", "000911", "000916", "000917", "000918", "000919", "000920", "000921", "000922", "000923", "000924", "000925", "000927", "000928", "000929", "000930", "000931", "000932", "000933", "000934", "000935", "000936", "000937", "000938", "000939", "000940", "000941", "000942", "000943", "000944", "000945", "000946", "000947", "000948", "000950", "000951", "000952", "000953", "000954", "000955", "000956", "000957", "000958", "000959", "000960", "000962", "000963", "000964", "000965", "000971", "000973", "000974", "000978", "000979", "000988", "000990", "000991", "000992", "000993", "000996", "000997", "000998", "000999", "001000", "001002", "001003", "001005", "001006", "001008", "001009", "001010", "001011", "001012", "001013", "001014", "001015", "001016", "001017", "001018", "001019", "001020", "001021", "001022", "001023", "001024", "001025", "001026", "001027", "001028", "001029", "001030", "001031", "001032", "001033", "001034", "001035", "001036", "001037", "001038", "001039", "001040", "001041", "001043", "001044", "001047", "001048", "001054", "001070", "001071", "001073", "001074", "001075", "001076", "001077", "001718", "001719", "001741", "001745", "001746", "001747", "001748", "001749", "001750", "001751", "001752", "001753", "001754", "001755", "001756", "001757", "001758", "001759", "001760", "001761", "001762", "001763", "001764", "001766", "001767", "001768", "001769", "001770", "001771", "001772", "001773", "001774", "001775", "001777", "001778", "001779", "001780", "001781", "001782", "001783", "001785", "001786", "001787", "001788", "001789", "001791", "001793", "001794", "001795", "001819", "001822", "001823", "001824", "001825", "001826", "001827", "001828", "001829", "001830", "001831", "001832", "001833", "001834", "001835", "001836", "001837", "001838", "001839", "001840", "001841", "001842", "001843", "001844", "001845", "001846", "001847", "001848", "001849", "001850", "001851", "001852", "001853", "001854", "001855", "001856", "001857", "001858", "001859", "001860", "001861", "003068", "003069", "003070", "003071", "003072", "003073", "003074", "003075", "003076", "003077", "003078", "003079", "003080", "003081", "003125", "003127", "003128", "003129", "003130", "003131", "003132", "003133", "003134", "003135", "003136", "003137", "003138", "003139", "003140", "003141", "003142", "003143", "003144", "003145", "003146", "003147", "003148", "003149", "003150", "003151", "003152", "003153", "003154", "003155", "003156", "003157", "003158", "003159", "003160", "003161", "003162", "003163", "003164", "003165", "003166", "003167", "003168", "003169", "003170", "003171", "003172", "003173", "003174", "003175", "003176", "003177", "003178", "003179", "003180", "003181", "003182", "003183", "003184", "003185", "003186", "003187", "003188", "003189", "003190", "003191", "003192", "003233", "003234", "003235", "003236", "003237", "003238", "003239", "003240", "003241", "003242", "003243", "003244", "003245", "003246", "003247", "003248", "003249", "003250", "003251", "003252", "003253", "003254", "003255", "003256", "003257", "003258", "003259", "003260", "003261", "003262", "003263", "003264", "003265", "003266", "003267", "003268", "003269", "003270", "003271", "003272", "003273", "003316", "003317", "003318", "003319", "003320", "003321", "003322", "003323", "003324", "003325", "003326", "003327", "003328", "003329", "003330", "003331", "003332", "003333", "003334", "003335", "003336", "003337", "003338", "003339", "003340", "003341", "003342", "003343", "003344", "003345", "003346", "003347", "003348", "003349", "003350", "003351", "003352", "003353", "003354", "003355", "003356", "003357", "003358", "003359", "003360", "003361", "003362", "003363", "003364", "003365", "003366", "003367", "003368", "003369", "003370", "003371", "003372", "003373", "003374", "003375", "003376", "003377", "003378", "003379", "003380", "003392", "003569", "003570", "003571", "003572", "003573", "003574", "003575", "003576", "003577", "003579", "003580", "003581", "003582", "003583", "003584", "003585", "003586", "003587", "003588", "003589", "003608", "003609", "003610", "003611", "003612", "003613", "003614", "003615", "003616", "003617", "003618", "003619", "003620", "003621", "003622", "003623", "003624", "003625", "003626", "003627", "003628", "003629", "003630", "003631", "003633", "003641", "003676", "003677", "003678", "003679", "004074", "004075", "004076", "004077", "004078", "004079", "004080", "004081", "004082", "004083", "004084", "004085", "004086", "004087", "004088", "004089", "004090", "004091", "004092", "004093", "004094", "004095", "004096", "004097", "004098", "004099", "004100", "004101", "004102", "004103", "004104", "004105", "004106", "004107", "004108", "004109", "004110", "004111", "004112", "004113", "004114", "004115", "004116", "004117", "004118", "004119", "004120", "004121", "004122", "004123", "004124", "004125", "004126", "004127", "004128", "004129", "004130", "004131", "004132", "004133", "004134", "004135", "004180", "004182", "004183", "004185", "004186", "004187", "004188", "004189", "004190", "004191", "004192", "004193", "004194", "004195", "004196", "004197", "004198", "004199", "004200", "004201", "004202", "004203", "004204", "004205", "004206", "004207", "004209", "004210", "004211", "004212", "004213", "004214", "004215", "004216", "004217", "004218", "004219", "004220", "004221", "004222", "004223", "004224", "004225", "004226", "004227", "004228", "004229", "004230", "004231", "004232", "004233", "004234", "004235", "004236", "004237", "004238", "004239", "004241", "004242", "004243", "004261", "004262", "004263", "004264", "004265", "004266", "004267", "004268", "004269", "004270", "004271", "004272", "004273", "004274", "004275", "004276", "004277", "004278", "004279", "004280", "004281", "004285", "004325", "004326", "004327", "004328", "004329", "004330", "004331", "004332", "004333", "004334", "004335", "004336", "004337", "004338", "004339", "004340", "004341", "004342", "004343", "004344", "004345", "004346", "004347", "004348", "004349", "004350", "004351", "004352", "004353", "004354", "004355", "004356", "004357", "004358", "004359", "004360", "004361", "004362", "004363", "004364", "004365", "004366", "004367", "004368", "004369", "004370", "004371", "004372", "004373", "004374", "004375", "004376", "004377", "004378", "004379", "004380", "004381", "004382", "004383", "004384", "004385", "004386", "004387", "004388", "004389", "004390", "004392", "004431", "004432", "004433", "004434", "004436", "004437", "004438", "004439", "004440", "004441", "004442", "004443", "004444", "004445", "004446", "004447", "004448", "004449", "007823", "007824", "007832", "009701", "010801", "010802", "010803", "010804", "010805", "010806", "010807", "010808", "010809", "010810", "010811", "010812", "010813", "010814", "010815", "010816", "010817", "010818", "010819", "010820", "010821", "010822", "010823", "010824", "010825", "010826", "010827", "010828", "010829", "010830", "010831", "010832", "010833", "010834", "010835", "010836", "010837", "010838", "010839", "010840", "010841", "010842", "010843", "010844", "010845", "010846", "010847", "010848", "010849", "010850", "010851", "010852", "010853", "010854", "010855", "010856", "010857", "010858", "010859", "010860", "010861", "010862", "010863", "010864", "010865", "010866", "010867", "010868", "010869", "010870", "010871", "010872", "010873", "010874", "010875", "010876", "010877", "010878", "010879", "010880", "010881", "010882", "010883", "010884", "010885", "010886", "010887", "010888", "010889", "010890", "010891", "010892", "010893", "010894", "010895", "010896", "010897", "010898", "010899", "010900", "010901", "010902", "010903", "010904", "010905", "010906", "010907", "010908", "010909", "010910", "010911", "010912", "010913", "010914", "010915", "010916", "010917", "010918", "010919", "010920", "010921", "010922", "010923", "010924", "010925", "010926", "010927", "010928", "010929", "010930", "010931", "010932", "010933", "010934", "010935", "010936", "010937", "010938", "010939", "010940", "010941", "010942", "010943", "010944", "010945", "010946", "010947", "010948", "010949", "010950", "010951", "010952", "010953", "010954", "010955", "010956", "010957", "010958", "010959", "010960", "010961", "010962", "010963", "010964", "010965", "010966", "010967", "010968", "010969", "010970", "010971", "010972", "010973", "010974", "010975", "010976", "010977", "010978", "010979", "010980", "010981", "010982", "010983", "010984", "010985", "010986", "010987", "010988", "010989", "010990", "010991", "010992", "010993", "010994", "010995", "010996", "010997", "010998", "010999", "011000", "011001", "011002", "011003", "011004", "011005", "011006", "011007", "011008", "011009", "011010", "011011", "011012", "011013", "011014", "011015", "011016", "011017", "011018", "011019", "011020", "011021", "011022", "011023", "011024", "011025", "011026", "011027", "011028", "011029", "011030", "011031", "011032", "011033", "011034", "011035", "011036", "011037", "011038", "011039", "011040", "011041", "011042", "011043", "011044", "011045", "011046", "011047", "011048", "011049", "011181", "011194", "011196", "011203", "011226", "011235", "011242", "011244", "011246", "011255", "011494", "011495", "011496", "011497", "011498", "011499", "011500", "011501", "011502", "011503", "011505", "011509", "011512", "011527", "011530", "011533", "011534", "011535", "011539", "011542", "011544", "011545", "011548", "011549", "011550", "011551", "011552", "011553", "011555", "011556", "011557", "011558", "011559", "011562", "011563", "011564", "011565", "011566", "011568", "011572", "011796", "011797", "011798", "011799", "011800", "011801", "011802", "011803", "011804", "011805", "011806", "011807", "011808", "011809", "011810", "011811", "011812", "011813", "011814", "011815", "011816", "011817", "011818", "011819", "011820", "011821", "011822", "011823", "011824", "011825", "011826", "011827", "011829", "011830", "011832", "011855", "011858", "011861", "011862", "011863", "011864", "011865", "011866", "011867", "011868", "011869", "011870", "011871", "011872", "011873", "011874", "011875", "011876", "011877", "011878", "011879", "011880", "011881", "011882", "011883", "011884", "011885", "011886", "011887", "011888", "011889", "011890", "011891", "011892", "011893", "011894", "011895", "011896", "011898", "011899", "011900", "011903", "011905", "011909", "011917", "011921", "011924", "011926", "011927", "011928", "011930", "011931", "011932", "011934", "011935", "011936", "011937", "011938", "011939", "011940", "011941", "011943", "011944", "011945", "011946", "011947", "011948", "011949", "011950", "011951", "011952", "011953", "011954", "011955", "011956", "011958", "011959", "013724", "013725", "013728", "013743", "013745", "013746", "013747", "013749", "013750", "013751", "013753", "013754", "013755", "013756", "013757", "013758", "013759", "013760", "013761", "013762", "013763", "013764", "013765", "013766", "013767", "013768", "013769", "013770", "013771", "013772", "013773", "013774", "013775", "013776", "013777", "013778", "013779", "013780", "013781", "013782", "013785", "013804", "013806", "013807", "013808", "013809", "013810", "013811", "013812", "013813", "013814", "013815", "013816", "013817", "013818", "013819", "013820", "013821", "013822", "013823", "013824", "013825", "013826", "013827", "013828", "013829", "013830", "013831", "013832", "013833", "013834", "013835", "013836", "013837", "013839", "013841", "013842", "013843", "013844", "013846", "013847", "013848", "013864", "013865", "013866", "013867", "013868", "013869", "013870", "013871", "013872", "013873", "013874", "013875", "013876", "013877", "013878", "013879", "013880", "013881", "013883", "013884", "013885", "013886", "013887", "013888", "013889", "013890", "013891", "013892", "013893", "013894", "013895", "013896", "013897", "013898", "013922", "013925", "014214", "014215", "014216", "014217", "014218", "014219", "014220", "014223", "014239", "014240", "014241", "014242", "014243", "014244", "014245", "014246", "014247", "014248", "014250", "014251", "014252", "014253", "014254", "014255", "014256", "014257", "014258", "014259", "014260", "014261", "014262", "014263", "014264", "014265", "014266", "014267", "014268", "014269", "014270", "014271", "014272", "014273", "014274", "014275", "014276", "014278", "014279", "014280", "014282", "014289", "014297", "014299", "014300", "014301", "014302", "014303", "014304", "014305", "014306", "014308", "014309", "014310", "014311", "014312", "014313", "014314", "014315", "014316", "014317", "014318", "014319", "014320", "014321", "014322", "014323", "014324", "014330", "014331", "014332", "014334", "014335", "014336", "014337", "014338", "014341", "014342", "014343", "014356", "014359", "014360", "014361", "014362", "014363", "014364", "014365", "014366", "014367", "014368", "014369", "014370", "014371", "014372", "014373", "014374", "014375", "014376", "014377", "014378", "014379", "014380", "014381", "014382", "014383", "014384", "014385", "014386", "014387", "014388", "014389", "014390", "014391", "014392", "014394", "014396", "014505", "014506", "014507", "014508", "014509", "014510", "014511", "014513", "014523", "014524", "014525", "014526", "014527", "014528", "014529", "014530", "014531", "014532", "014533", "014534", "014535", "014536", "014537", "014538", "014539", "017267", "017268", "017269", "017270", "017271", "017272", "017273", "017284", "017285", "017286", "017287", "017288", "017289", "017290", "017291", "017292", "017293", "017294", "017295", "017296", "017297", "017298", "017299", "017312", "017313", "017314", "017315", "017316", "017317", "017318", "017319", "017320", "017321", "017322", "017323", "017324", "017325", "017326", "017327", "017337", "017338", "017339", "017340", "017341", "017342", "017343", "017344", "017345", "017346", "017347", "017348", "017349", "017350", "017351", "017352", "017363", "017365", "017366", "017367", "017368", "017369", "017370", "017371", "017372", "017373", "017374", "017375", "017376", "017377", "017378", "017380", "017391", "017392", "017393", "017394", "017395", "017396", "017397", "017398", "017399", "017400", "017401", "017402", "017403", "017404", "017405", "017415", "017417", "017418", "017419", "017420", "017421", "017422", "017423", "017424", "017425", "017426", "017427", "017428", "017429", "017430", "017431", "017432", "017433", "017741", "017742", "017743", "017744", "017745", "017746", "017747", "017748", "017749", "017750", "017751", "017752", "017753", "017754", "017755", "017757", "017767", "017768", "017769", "017770", "017771", "017772", "017773", "017774", "017775", "017776", "017777", "017778", "017779", "017780", "017781", "017782", "017793", "017794", "018226", "018227", "018228", "018229", "018230", "018231", "018232", "018233", "018234", "018235", "018236", "018237", "018238", "018239", "018240", "018241", "018252", "018253", "018254", "018886", "018887", "018888", "018889", "018890", "018891", "018892", "018893", "018894", "018895", "018930", "018933", "018934", "018935", "018937", "018938", "018940", "018941", "018942", "018943", "018944", "018945", "018946", "018947", "018948", "018949", "018950", "018951", "018952", "018953", "018954", "018955", "018956", "018957", "018958", "018959", "018960", "018961", "018962", "018963", "018964", "018965", "018966", "018967", "018968", "018969", "018970", "018971", "018972", "018973", "018974", "018975", "018976", "018977", "018978", "018979", "018980", "018981", "018982", "018983", "018984", "018985", "018986", "018987", "018988", "018989", "018990", "018992", "018993", "018994", "019034", "019035", "019036", "019037", "019039", "019040", "019042", "019043", "019044", "019045", "019046", "019047", "019048", "019049", "019050", "019051", "019052", "019053", "019054", "019055", "019056", "019057", "019058", "019059", "019060", "019061", "019062", "019063", "019064", "019065", "019066", "019067", "019068", "019069", "019070", "019071", "019072", "019073", "019074", "019075", "019076", "019077", "019078", "019079", "019080", "019081", "019082", "019083", "019084", "019766", "019767", "019768", "019769", "019770", "019771", "019772", "019773", "019774", "019775", "019776", "019777", "019778", "019779", "019780", "019781", "019782", "019783", "019785", "019786", "019789", "019823", "019826", "019828", "019829", "019830", "019831", "019832", "019833", "019834", "019835", "019836", "019837", "019838", "019839", "019840", "019841", "019842", "019843", "019844", "019845", "019846", "019847", "019848", "019849", "019850", "019851", "019852", "019853", "019854", "019855", "019856", "019857", "019858", "019859", "019860", "019861", "019862", "019863", "019864", "019865", "019866", "019867", "019868", "019869", "019870", "019871", "019872", "019873", "019874", "019875", "019876", "019881", "019882", "019883", "019884", "019885", "019886", "019887", "019889", "019891", "019892", "019893", "019928", "019929", "019930", "019931", "019932", "019933", "019934", "019935", "019936", "019937", "019938", "019939", "019940", "019941", "019942", "019943", "019944", "019945", "019946", "019947", "019948", "019949", "019950", "019951", "019952", "019953", "019954", "019955", "019956", "019957", "019958", "019959", "019960", "019961", "019962", "019963", "019964", "019965", "019966", "019967", "019968", "019969", "019970", "019971", "019972", "019973", "019974", "019975", "019976", "019977", "019978", "019979", "019980", "019981", "019986", "019987", "019988", "019990", "019992"]

segment_dict = {
        **{frame: (0, 209) for frame in range(0, 210)},
        **{frame: (210, 217) for frame in range(210, 218)},
        **{frame: (218, 409) for frame in range(218, 410)},
        **{frame: (410, 418) for frame in range(410, 419)},
        **{frame: (419, 868) for frame in range(419, 869)},
        **{frame: (869, 870) for frame in range(869, 871)},
        **{frame: (871, 1077) for frame in range(871, 1078)},
        **{frame: (1078, 1296) for frame in range(1078, 1297)},
        **{frame: (1297, 1515) for frame in range(1297, 1516)},
        **{frame: (1715, 1864) for frame in range(1715, 1865)},
        **{frame: (1865, 1933) for frame in range(1865, 1934)},
        **{frame: (1934, 2064) for frame in range(1934, 2065)},
        **{frame: (2234, 2432) for frame in range(2234, 2433)},
        **{frame: (2433, 2571) for frame in range(2433, 2572)},
        **{frame: (3057, 3230) for frame in range(3057, 3231)},
        **{frame: (3231, 3399) for frame in range(3231, 3400)},
        **{frame: (3400, 3559) for frame in range(3400, 3560)},
        **{frame: (3560, 3679) for frame in range(3560, 3680)},
        **{frame: (3680, 3829) for frame in range(3680, 3830)},
        **{frame: (4050, 4259) for frame in range(4050, 4260)},
        **{frame: (4260, 4449) for frame in range(4260, 4450)},
        **{frame: (4450, 4582) for frame in range(4450, 4583)},
        **{frame: (4583, 4742) for frame in range(4583, 4743)},
        **{frame: (4883, 5073) for frame in range(4883, 5074)},
        **{frame: (5603, 5782) for frame in range(5603, 5783)},
        **{frame: (5783, 5932) for frame in range(5783, 5933)},
        **{frame: (6106, 6245) for frame in range(6106, 6246)},
        **{frame: (6246, 6435) for frame in range(6246, 6436)},
        **{frame: (6436, 6585) for frame in range(6436, 6586)},
        **{frame: (6586, 6705) for frame in range(6586, 6706)},
        **{frame: (6706, 6885) for frame in range(6706, 6886)},
        **{frame: (6886, 7005) for frame in range(6886, 7006)},
        **{frame: (7445, 7644) for frame in range(7445, 7645)},
        **{frame: (7645, 7814) for frame in range(7645, 7815)},
        **{frame: (7815, 7984) for frame in range(7815, 7985)},
        **{frame: (8665, 8794) for frame in range(8665, 8795)},
        **{frame: (8795, 8934) for frame in range(8795, 8935)},
        **{frame: (8935, 9109) for frame in range(8935, 9110)},
        **{frame: (9110, 9299) for frame in range(9110, 9300)},
        **{frame: (9300, 9469) for frame in range(9300, 9470)},
        **{frame: (9680, 9819) for frame in range(9680, 9820)},
        **{frame: (10010, 10219) for frame in range(10010, 10220)},
        **{frame: (10220, 10419) for frame in range(10220, 10420)},
        **{frame: (10420, 10609) for frame in range(10420, 10610)},
        **{frame: (10610, 10799) for frame in range(10610, 10800)},
        **{frame: (10800, 11049) for frame in range(10800, 11050)},
        **{frame: (11050, 11259) for frame in range(11050, 11260)},
        **{frame: (11260, 11469) for frame in range(11260, 11470)},
        **{frame: (11470, 12609) for frame in range(11470, 12610)},
        **{frame: (12610, 13926) for frame in range(12610, 13927)},
        **{frame: (13927, 14396) for frame in range(13927, 14397)},
        **{frame: (14445, 16084) for frame in range(14445, 16085)},
        **{frame: (16085, 16224) for frame in range(16085, 16225)},
        **{frame: (16225, 18054) for frame in range(16225, 18055)},
        **{frame: (18055, 18094) for frame in range(18055, 18095)},
        **{frame: (18095, 18414) for frame in range(18095, 18415)},
        **{frame: (18415, 18654) for frame in range(18415, 18655)},
        **{frame: (18885, 19084) for frame in range(18885, 19085)},
        **{frame: (19515, 20514) for frame in range(19515, 20515)},
    }
train_cav_num_list=[1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1]
val_cav_num_list=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
def is_in_same_segment(x, history):
    segment = segment_dict.get(int(x), (None, None))
    start, end = segment
    return start <= int(history) <= end
def cache_data(data):
    return data['ego']['veh_frame_id']

def main():
    opt = train_parser()
    hypes = yaml_utils.load_yaml(opt.hypes_yaml, opt)

    print('Dataset Building')
    opencood_train_dataset = build_dataset(hypes, visualize=False, train=True)
    opencood_validate_dataset = build_dataset(hypes,
                                              visualize=False,
                                              train=False)

    delay=1
    if delay==1:
    ###############################################历史第一帧###############################################
        opencood_train_dataset.change_dataset(0,0)
        for i in range(1,len(train_list)):#len(train_list)

            result_bool = is_in_same_segment(train_list[i], train_list[i-1])

            if result_bool:
                opencood_train_dataset.change_dataset(i,1)
            else:
                opencood_train_dataset.change_dataset(i,0)

###############################################历史第一帧###############################################
    if delay==1:
        opencood_validate_dataset.change_dataset(0,0)

        for i in range(1,len(val_list)):#len(val_list)
            # time1=time.time()
            result_bool = is_in_same_segment(val_list[i], val_list[i-1])
            if result_bool:
                opencood_validate_dataset.change_dataset(i,1)
            else:
                opencood_validate_dataset.change_dataset(i,0)

    train_loader = DataLoader(opencood_train_dataset,
                              batch_size=hypes['train_params']['batch_size'],
                              num_workers=8,
                              collate_fn=opencood_train_dataset.collate_batch_train,
                              shuffle=True,#True
                              pin_memory=True,
                              drop_last=True)
    val_loader = DataLoader(opencood_validate_dataset,
                            batch_size=hypes['train_params']['batch_size'],
                            num_workers=8,
                            collate_fn=opencood_train_dataset.collate_batch_train,
                            shuffle=True,
                            pin_memory=True,
                            drop_last=True)

    print('Creating Model')
    model = train_utils.create_model(hypes)
    #device = torch.device('cuda:2' if torch.cuda.is_available() else 'cpu') #for 
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') #for slurm
    model_params = sum(p.numel() for p in model.parameters())
    print(f'model total parameters: {model_params}')

    using_pretrained = 0
    print('loading early-fusion pretrained model status: ', using_pretrained)
    if using_pretrained:
        teacher_checkpoint_path = hypes['kd_flag']['teacher_path']
        model.load_state_dict(torch.load(teacher_checkpoint_path), strict=True)

    # we assume gpu is necessary
    if torch.cuda.is_available():
        model.to(device)

    # define the loss
    criterion = train_utils.create_loss(hypes)

    # optimizer setup
    optimizer = train_utils.setup_optimizer(hypes, model)
    # lr scheduler setup

    # record lowest validation loss checkpoint.
    lowest_val_loss = 1e5
    lowest_val_epoch = -1
    
    # if we want to train from last checkpoint.
    if opt.model_dir:
        saved_path = opt.model_dir
        init_epoch, model = train_utils.load_saved_model(saved_path, model)
        lowest_val_epoch = init_epoch
        scheduler = train_utils.setup_lr_schedular(hypes, optimizer, init_epoch=init_epoch)

    else:
        init_epoch = 0
        # if we train the model from scratch, we need to create a folder
        # to save the model,
        saved_path = train_utils.setup_train(hypes)
        scheduler = train_utils.setup_lr_schedular(hypes, optimizer)

    # record training
    writer = SummaryWriter(saved_path)

    print('Training start')
    epoches = hypes['train_params']['epoches']
    supervise_single_flag = False if not hasattr(opencood_train_dataset, "supervise_single") else opencood_train_dataset.supervise_single

    ############ For DiscoNet ##############
    if "kd_flag" in hypes.keys():
        kd_flag = True
        teacher_model_name = hypes['kd_flag']['teacher_model'] # point_pillar_disconet_teacher
        teacher_model_config = hypes['kd_flag']['teacher_model_config']
        teacher_checkpoint_path = hypes['kd_flag']['teacher_path']

        # import the model
        model_filename = "opencood.models." + teacher_model_name
        model_lib = importlib.import_module(model_filename)
        teacher_model_class = None
        target_model_name = teacher_model_name.replace('_', '')

        for name, cls in model_lib.__dict__.items():
            if name.lower() == target_model_name.lower():
                teacher_model_class = cls
        
        teacher_model = teacher_model_class(teacher_model_config)
        teacher_model.load_state_dict(torch.load(teacher_checkpoint_path), strict=False)
        
        for p in teacher_model.parameters():
            p.requires_grad_(False)

        if torch.cuda.is_available():
            teacher_model.to(device)

        teacher_model.eval()
    else:
        kd_flag = False
    ########################################加载model_history start
    opt_history = Namespace(model_dir='opencood/logs/lcfm240602',fusion_method='intermediate')

    assert opt_history.fusion_method in ['late', 'early', 'intermediate', 'no', 'no_w_uncertainty', 'single', 'late_2model', 'no_inf'] 
    #print(opt1.fusion_method)
    hypes_history = yaml_utils.load_yaml(None, opt_history)
    
    hypes_history['validate_dir'] = hypes_history['test_dir']
    if 'box_align' in hypes_history.keys():
        hypes_history['box_align']['val_result'] = hypes['box_align']['test_result']

    #print('Creating Model1') 
    model_history = train_utils.create_model_historybev(hypes_history)
    # we assume gpu is necessary
    #print('Loading Model1 from checkpoint')
    saved_path_history = opt_history.model_dir
    resume_epoch, model_history = train_utils.load_saved_model(saved_path_history, model_history)
    if torch.cuda.is_available():
        model_history.cuda()
    model_history.eval()
    ########################################加载model_history end
    for epoch in range(init_epoch, max(epoches, init_epoch)):
        for param_group in optimizer.param_groups:
            print('learning rate %f' % param_group["lr"])
        for i, batch_data in enumerate(train_loader):
            if batch_data is None:
                continue
            # the model will be evaluation mode during validation
            model.train()
            model.zero_grad()
            optimizer.zero_grad()
            batch_data = train_utils.to_device(batch_data, device)


            batch_data['ego']['epoch'] = epoch




            # if kd_flag:
            teacher_output_dict = teacher_model(batch_data['ego'])
            
            #*******************************************得到历史bev特征**********************************************************************
            history_data = {
                'processed_lidar': {
                    'voxel_features': batch_data['ego']['history_processed_lidar']['voxel_features'],
                    'voxel_coords': batch_data['ego']['history_processed_lidar']['voxel_coords'],
                    'voxel_num_points': batch_data['ego']['history_processed_lidar']['voxel_num_points']}
                    # 'record_len':batch_data['ego']['record_len'],
                    # 'pairwise_t_matrix':batch_data['ego']['pairwise_t_matrix'],
                    # 'spatial_correction_matrix':batch_data['ego']['spatial_correction_matrix'],
                    # 'prior_encoding':batch_data['ego']['prior_encoding']
                }
            #print('*******************************得到历史bev特征*****************************')
            ouput_dict_history=model_history(history_data)
            history_spatial_features_2d=ouput_dict_history['feature_before_fusion']
            #*************************************得到历史bev特征end*************************************************************************

            #训练模型
            # ouput_dict = model(batch_data['ego'])

            ouput_dict = model(batch_data['ego'],history_spatial_features_2d)
            ouput_dict.update(teacher_output_dict)#将几个bev特征放一起

            final_loss = criterion(ouput_dict, batch_data['ego']['label_dict'])
            criterion.logging(epoch, i, len(train_loader), writer)

            if supervise_single_flag:
                final_loss += criterion(ouput_dict, batch_data['ego']['label_dict_single'], suffix="_single")
                criterion.logging(epoch, i, len(train_loader), writer, suffix="_single")

            # back-propagation
            final_loss.backward()
            optimizer.step()

            #torch.cuda.empty_cache()

        #if (epoch+1) % hypes['train_params']['eval_freq'] == 0:
        if epoch>=0:
            valid_ave_loss = []

            with torch.no_grad():
                for i, batch_data in enumerate(val_loader):
                    if batch_data is None:
                        continue
                    model.eval()

                    batch_data = train_utils.to_device(batch_data, device)
                    batch_data['ego']['epoch'] = epoch
        #*******************************************得到历史bev特征**********************************************************************
                    history_data = {
                        'processed_lidar': {
                            'voxel_features': batch_data['ego']['history_processed_lidar']['voxel_features'],
                            'voxel_coords': batch_data['ego']['history_processed_lidar']['voxel_coords'],
                            'voxel_num_points': batch_data['ego']['history_processed_lidar']['voxel_num_points']}
                            # 'record_len':batch_data['ego']['record_len'],
                            # 'pairwise_t_matrix':batch_data['ego']['pairwise_t_matrix'],
                            # 'spatial_correction_matrix':batch_data['ego']['spatial_correction_matrix'],
                            # 'prior_encoding':batch_data['ego']['prior_encoding']
                        }

                    #print('*******************************得到历史bev特征*****************************')
                    ouput_dict_history=model_history(history_data)
                    history_spatial_features_2d=ouput_dict_history['feature_before_fusion']
            #*************************************得到历史bev特征end*************************************************************************
                    ouput_dict = model(batch_data['ego'],history_spatial_features_2d)
                    #ouput_dict = model(batch_data['ego'])
                    if kd_flag:
                        teacher_output_dict = teacher_model(batch_data['ego'])
                        ouput_dict.update(teacher_output_dict)

                    final_loss = criterion(ouput_dict,
                                           batch_data['ego']['label_dict'])
                    valid_ave_loss.append(final_loss.item())
            valid_ave_loss = statistics.mean(valid_ave_loss)
            print('At epoch %d, the validation loss is %f' % (epoch,
                                                              valid_ave_loss))
            writer.add_scalar('Validate_Loss', valid_ave_loss, epoch)
            
            # lowest val loss
            if valid_ave_loss < lowest_val_loss:
                lowest_val_loss = valid_ave_loss
                torch.save(model.state_dict(),
                       os.path.join(saved_path,
                                    'net_epoch_bestval_at%d.pth' % (epoch + 1)))
                if lowest_val_epoch != -1 and os.path.exists(os.path.join(saved_path,
                                    'net_epoch_bestval_at%d.pth' % (lowest_val_epoch))):
                    os.remove(os.path.join(saved_path,
                                    'net_epoch_bestval_at%d.pth' % (lowest_val_epoch)))
                # lowest_val_epoch = epoch + 1
                lowest_val_epoch = epoch + 1
                print('lowest_val_loss epoch: {}'.format(lowest_val_epoch))
        #保存模型
        #if (epoch+1) % hypes['train_params']['save_freq'] == 0 and (epoch+1) >= epoches * 0.6:
        if epoch==29 or epoch==30:
            #torch.save(model.state_dict(),os.path.join(saved_path,'net_epoch%d.pth' % (epoch + 1)))
            print('******************************************************epoch==29')
            torch.save(model.state_dict(),
                       os.path.join(saved_path,
                                    'net_epoch_bestval_at%d.pth' % (epoch + 1)))
        scheduler.step(epoch)
    print('lowest_val_loss epoch: {}'.format(lowest_val_epoch))
    print('Training Finished, checkpoints saved to %s' % saved_path)
    #torch.cuda.empty_cache()
    run_test = True
    
    # ddp training may leave multiple bestval
    bestval_model_list = glob.glob(os.path.join(saved_path, "net_epoch_bestval_at*"))
    
    if len(bestval_model_list) > 1:
        bestval_model_epoch_list = [eval(x.split("/")[-1].lstrip("net_epoch_bestval_at").rstrip(".pth")) for x in bestval_model_list]
        ascending_idx = np.argsort(bestval_model_epoch_list)
        for idx in ascending_idx:
            if idx != (len(bestval_model_list) - 1):
                os.remove(bestval_model_list[idx])

    if run_test:
        fusion_method = opt.fusion_method

        if 'noise_setting' in hypes and hypes['noise_setting']['add_noise']:
            cmd = f"python opencood/tools/inference_w_noise_deform.py --model_dir {saved_path} --fusion_method {fusion_method}"
        else:
            cmd = f"python opencood/tools/inference.py --model_dir {saved_path} --fusion_method {fusion_method}"
        print(f"Running command: {cmd}")
        os.system(cmd)

if __name__ == '__main__':
    main()
