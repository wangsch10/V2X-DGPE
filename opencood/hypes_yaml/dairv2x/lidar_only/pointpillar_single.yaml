name: dairv2x_point_pillar_lidar_single_veh_wo_gtaug_e60
data_dir: "/data/dairv2x/cooperative-vehicle-infrastructure"
root_dir: "/data/dairv2x/cooperative-vehicle-infrastructure/train.json"
validate_dir: "/data/dairv2x/cooperative-vehicle-infrastructure/val.json"
test_dir: "/data/dairv2x/cooperative-vehicle-infrastructure/val.json"

class_names: ['Car']

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 8
  epoches: 60 #40
  eval_freq: 5
  save_freq: 5

input_source: ['lidar']
label_type: 'lidar'

comm_range: 100
only_vis_ego: true

fusion:
  core_method: 'late'
  dataset: 'dairv2x'
  args: []

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 5]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-100.8, -40, -3.5, 100.8, 40, 1.5]

data_augment:
  # - NAME: gt_sampling
  #   USE_ROAD_PLANE: False
  #   DB_INFO_PATH:
  #       - dairv2x_dbinfos_vehicle.pkl
  #   PREPARE: {
  #       filter_by_min_points: ['Car:5'],
  #       # filter_by_difficulty: [-1],
  #   }

  #   SAMPLE_GROUPS: ['Car:15']
  #   NUM_POINT_FEATURES: 4
  #   DATABASE_WITH_FAKELIDAR: False
  #   REMOVE_EXTRA_WIDTH: [0.0, 0.0, 0.0]
  #   LIMIT_WHOLE_SCENE: False
  #   BOX_ORDER: 'lwh'
    
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 4.5
    w: 2
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: point_pillar
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *anchor_num
    dir_args: *dir_args
    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64

    base_bev_backbone:
      layer_nums: [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]

    shrink_header:
      kernal_size: [ 3 ]
      stride: [ 1 ]
      padding: [ 1 ]
      dim: [ 256 ]
      input_dim: 384 # 128 * 3

loss:
  core_method: point_pillar_loss
  args:
    pos_cls_weight: 1.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      args: *dir_args

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [35, 50] #[20, 30] #[10, 20]

